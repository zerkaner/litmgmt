// tslint:disable
/**
 * litmgmt
 * Latex literature management for SE2
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Collection
 */
export interface Collection {
    /**
     * 
     * @type {number}
     * @memberof Collection
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Collection
     */
    name: string;
    /**
     * 
     * @type {Array<Entry>}
     * @memberof Collection
     */
    entries: Array<Entry>;
}
/**
 * 
 * @export
 * @interface Credentials
 */
export interface Credentials {
    /**
     * 
     * @type {string}
     * @memberof Credentials
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Credentials
     */
    password: string;
}
/**
 * 
 * @export
 * @interface Entry
 */
export interface Entry {
    /**
     * 
     * @type {number}
     * @memberof Entry
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Entry
     */
    citeKey: string;
    /**
     * 
     * @type {EntryType}
     * @memberof Entry
     */
    entryType: EntryType;
    /**
     * 
     * @type {Array<Field>}
     * @memberof Entry
     */
    fields: Array<Field>;
}
/**
 * 
 * @export
 * @interface EntryDescription
 */
export interface EntryDescription {
    /**
     * 
     * @type {EntryType}
     * @memberof EntryDescription
     */
    entryType: EntryType;
    /**
     * 
     * @type {Array<FieldDescription>}
     * @memberof EntryDescription
     */
    requiredFields: Array<FieldDescription>;
    /**
     * 
     * @type {Array<FieldDescription>}
     * @memberof EntryDescription
     */
    optionalFields: Array<FieldDescription>;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum EntryType {
    Article = 'article',
    Book = 'book',
    Booklet = 'booklet',
    Inbook = 'inbook',
    Incollection = 'incollection',
    Inproceedings = 'inproceedings',
    Manual = 'manual',
    Mastersthesis = 'mastersthesis',
    Misc = 'misc',
    Phdthesis = 'phdthesis',
    Proceedings = 'proceedings',
    Techreport = 'techreport',
    Unpublished = 'unpublished'
}

/**
 * 
 * @export
 * @interface Field
 */
export interface Field {
    /**
     * 
     * @type {FieldType}
     * @memberof Field
     */
    fieldType: FieldType;
    /**
     * 
     * @type {string}
     * @memberof Field
     */
    value: string;
}
/**
 * 
 * @export
 * @interface FieldDescription
 */
export interface FieldDescription {
    /**
     * 
     * @type {FieldType}
     * @memberof FieldDescription
     */
    fieldType: FieldType;
    /**
     * 
     * @type {string}
     * @memberof FieldDescription
     */
    formatting: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum FieldType {
    Address = 'address',
    Annote = 'annote',
    Author = 'author',
    Booktitle = 'booktitle',
    Chapter = 'chapter',
    Crossref = 'crossref',
    Edition = 'edition',
    Editor = 'editor',
    Howpublished = 'howpublished',
    Institution = 'institution',
    Journal = 'journal',
    Key = 'key',
    Month = 'month',
    Note = 'note',
    Number = 'number',
    Organization = 'organization',
    Pages = 'pages',
    Publisher = 'publisher',
    School = 'school',
    Series = 'series',
    Title = 'title',
    Type = 'type',
    Volume = 'volume',
    Year = 'year'
}

/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    password: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * 
     * @type {Collection}
     * @memberof User
     */
    collections: Collection;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new collection
         * @param {Collection} collection Collection to add to the library
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCollection(collection: Collection, options: any = {}): RequestArgs {
            // verify required parameter 'collection' is not null or undefined
            if (collection === null || collection === undefined) {
                throw new RequiredError('collection','Required parameter collection was null or undefined when calling addCollection.');
            }
            const localVarPath = `/collections`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof collection !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(collection !== undefined ? collection : {}) : (collection || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new entry
         * @param {number} collectionId ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEntry(collectionId: number, options: any = {}): RequestArgs {
            // verify required parameter 'collectionId' is not null or undefined
            if (collectionId === null || collectionId === undefined) {
                throw new RequiredError('collectionId','Required parameter collectionId was null or undefined when calling addEntry.');
            }
            const localVarPath = `/collections/{collectionId}/entries`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(options: any = {}): RequestArgs {
            const localVarPath = `/register`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * deletes a collection by id
         * @param {number} id ID of collection to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollection(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteCollection.');
            }
            const localVarPath = `/collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * deletes a collection by id
         * @param {number} collectionId ID
         * @param {number} entryId ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntry(collectionId: number, entryId: number, options: any = {}): RequestArgs {
            // verify required parameter 'collectionId' is not null or undefined
            if (collectionId === null || collectionId === undefined) {
                throw new RequiredError('collectionId','Required parameter collectionId was null or undefined when calling deleteEntry.');
            }
            // verify required parameter 'entryId' is not null or undefined
            if (entryId === null || entryId === undefined) {
                throw new RequiredError('entryId','Required parameter entryId was null or undefined when calling deleteEntry.');
            }
            const localVarPath = `/collections/{collectionId}/entries/{entryId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * edits a collection by id
         * @param {number} id ID of collection to delete
         * @param {Collection} collection collection to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editCollection(id: number, collection: Collection, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling editCollection.');
            }
            // verify required parameter 'collection' is not null or undefined
            if (collection === null || collection === undefined) {
                throw new RequiredError('collection','Required parameter collection was null or undefined when calling editCollection.');
            }
            const localVarPath = `/collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof collection !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(collection !== undefined ? collection : {}) : (collection || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * edits an entry by id
         * @param {number} collectionId ID
         * @param {number} entryId ID
         * @param {Collection} collection entry to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editEntry(collectionId: number, entryId: number, collection: Collection, options: any = {}): RequestArgs {
            // verify required parameter 'collectionId' is not null or undefined
            if (collectionId === null || collectionId === undefined) {
                throw new RequiredError('collectionId','Required parameter collectionId was null or undefined when calling editEntry.');
            }
            // verify required parameter 'entryId' is not null or undefined
            if (entryId === null || entryId === undefined) {
                throw new RequiredError('entryId','Required parameter entryId was null or undefined when calling editEntry.');
            }
            // verify required parameter 'collection' is not null or undefined
            if (collection === null || collection === undefined) {
                throw new RequiredError('collection','Required parameter collection was null or undefined when calling editEntry.');
            }
            const localVarPath = `/collections/{collectionId}/entries/{entryId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof collection !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(collection !== undefined ? collection : {}) : (collection || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * returns a single collection
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCollection(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling findCollection.');
            }
            const localVarPath = `/collections/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Latex literature management
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCollections(options: any = {}): RequestArgs {
            const localVarPath = `/collections`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * returns a single entry
         * @param {number} collectionId ID
         * @param {number} entryId ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEntry(collectionId: number, entryId: number, options: any = {}): RequestArgs {
            // verify required parameter 'collectionId' is not null or undefined
            if (collectionId === null || collectionId === undefined) {
                throw new RequiredError('collectionId','Required parameter collectionId was null or undefined when calling findEntry.');
            }
            // verify required parameter 'entryId' is not null or undefined
            if (entryId === null || entryId === undefined) {
                throw new RequiredError('entryId','Required parameter entryId was null or undefined when calling findEntry.');
            }
            const localVarPath = `/collections/{collectionId}/entries/{entryId}`
                .replace(`{${"collectionId"}}`, encodeURIComponent(String(collectionId)))
                .replace(`{${"entryId"}}`, encodeURIComponent(String(entryId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get description for all entry types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntryDescriptions(options: any = {}): RequestArgs {
            const localVarPath = `/entrydescriptions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a new user session
         * @param {Credentials} credentials User Credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(credentials: Credentials, options: any = {}): RequestArgs {
            // verify required parameter 'credentials' is not null or undefined
            if (credentials === null || credentials === undefined) {
                throw new RequiredError('credentials','Required parameter credentials was null or undefined when calling loginUser.');
            }
            const localVarPath = `/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (typeof credentials !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(credentials !== undefined ? credentials : {}) : (credentials || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a new collection
         * @param {Collection} collection Collection to add to the library
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCollection(collection: Collection, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).addCollection(collection, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new entry
         * @param {number} collectionId ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEntry(collectionId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).addEntry(collectionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Creates a new user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).addUser(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * deletes a collection by id
         * @param {number} id ID of collection to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollection(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).deleteCollection(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * deletes a collection by id
         * @param {number} collectionId ID
         * @param {number} entryId ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntry(collectionId: number, entryId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).deleteEntry(collectionId, entryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * edits a collection by id
         * @param {number} id ID of collection to delete
         * @param {Collection} collection collection to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editCollection(id: number, collection: Collection, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).editCollection(id, collection, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * edits an entry by id
         * @param {number} collectionId ID
         * @param {number} entryId ID
         * @param {Collection} collection entry to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editEntry(collectionId: number, entryId: number, collection: Collection, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).editEntry(collectionId, entryId, collection, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * returns a single collection
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCollection(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Collection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).findCollection(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Latex literature management
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCollections(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Collection>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).findCollections(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * returns a single entry
         * @param {number} collectionId ID
         * @param {number} entryId ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEntry(collectionId: number, entryId: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Entry> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).findEntry(collectionId, entryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get description for all entry types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntryDescriptions(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<EntryDescription>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getEntryDescriptions(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a new user session
         * @param {Credentials} credentials User Credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(credentials: Credentials, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<string> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).loginUser(credentials, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a new collection
         * @param {Collection} collection Collection to add to the library
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCollection(collection: Collection, options?: any): AxiosPromise<Collection> {
            return DefaultApiFp(configuration).addCollection(collection, options)(axios, basePath);
        },
        /**
         * Creates a new entry
         * @param {number} collectionId ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addEntry(collectionId: number, options?: any): AxiosPromise<Collection> {
            return DefaultApiFp(configuration).addEntry(collectionId, options)(axios, basePath);
        },
        /**
         * Creates a new user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).addUser(options)(axios, basePath);
        },
        /**
         * deletes a collection by id
         * @param {number} id ID of collection to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCollection(id: number, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteCollection(id, options)(axios, basePath);
        },
        /**
         * deletes a collection by id
         * @param {number} collectionId ID
         * @param {number} entryId ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntry(collectionId: number, entryId: number, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteEntry(collectionId, entryId, options)(axios, basePath);
        },
        /**
         * edits a collection by id
         * @param {number} id ID of collection to delete
         * @param {Collection} collection collection to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editCollection(id: number, collection: Collection, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).editCollection(id, collection, options)(axios, basePath);
        },
        /**
         * edits an entry by id
         * @param {number} collectionId ID
         * @param {number} entryId ID
         * @param {Collection} collection entry to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editEntry(collectionId: number, entryId: number, collection: Collection, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).editEntry(collectionId, entryId, collection, options)(axios, basePath);
        },
        /**
         * returns a single collection
         * @param {number} id ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCollection(id: number, options?: any): AxiosPromise<Collection> {
            return DefaultApiFp(configuration).findCollection(id, options)(axios, basePath);
        },
        /**
         * Latex literature management
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findCollections(options?: any): AxiosPromise<Array<Collection>> {
            return DefaultApiFp(configuration).findCollections(options)(axios, basePath);
        },
        /**
         * returns a single entry
         * @param {number} collectionId ID
         * @param {number} entryId ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEntry(collectionId: number, entryId: number, options?: any): AxiosPromise<Entry> {
            return DefaultApiFp(configuration).findEntry(collectionId, entryId, options)(axios, basePath);
        },
        /**
         * Get description for all entry types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntryDescriptions(options?: any): AxiosPromise<Array<EntryDescription>> {
            return DefaultApiFp(configuration).getEntryDescriptions(options)(axios, basePath);
        },
        /**
         * Returns a new user session
         * @param {Credentials} credentials User Credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        loginUser(credentials: Credentials, options?: any): AxiosPromise<string> {
            return DefaultApiFp(configuration).loginUser(credentials, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Creates a new collection
     * @param {Collection} collection Collection to add to the library
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addCollection(collection: Collection, options?: any) {
        return DefaultApiFp(this.configuration).addCollection(collection, options)(this.axios, this.basePath);
    }

    /**
     * Creates a new entry
     * @param {number} collectionId ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addEntry(collectionId: number, options?: any) {
        return DefaultApiFp(this.configuration).addEntry(collectionId, options)(this.axios, this.basePath);
    }

    /**
     * Creates a new user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addUser(options?: any) {
        return DefaultApiFp(this.configuration).addUser(options)(this.axios, this.basePath);
    }

    /**
     * deletes a collection by id
     * @param {number} id ID of collection to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCollection(id: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteCollection(id, options)(this.axios, this.basePath);
    }

    /**
     * deletes a collection by id
     * @param {number} collectionId ID
     * @param {number} entryId ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteEntry(collectionId: number, entryId: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteEntry(collectionId, entryId, options)(this.axios, this.basePath);
    }

    /**
     * edits a collection by id
     * @param {number} id ID of collection to delete
     * @param {Collection} collection collection to edit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editCollection(id: number, collection: Collection, options?: any) {
        return DefaultApiFp(this.configuration).editCollection(id, collection, options)(this.axios, this.basePath);
    }

    /**
     * edits an entry by id
     * @param {number} collectionId ID
     * @param {number} entryId ID
     * @param {Collection} collection entry to edit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editEntry(collectionId: number, entryId: number, collection: Collection, options?: any) {
        return DefaultApiFp(this.configuration).editEntry(collectionId, entryId, collection, options)(this.axios, this.basePath);
    }

    /**
     * returns a single collection
     * @param {number} id ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findCollection(id: number, options?: any) {
        return DefaultApiFp(this.configuration).findCollection(id, options)(this.axios, this.basePath);
    }

    /**
     * Latex literature management
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findCollections(options?: any) {
        return DefaultApiFp(this.configuration).findCollections(options)(this.axios, this.basePath);
    }

    /**
     * returns a single entry
     * @param {number} collectionId ID
     * @param {number} entryId ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findEntry(collectionId: number, entryId: number, options?: any) {
        return DefaultApiFp(this.configuration).findEntry(collectionId, entryId, options)(this.axios, this.basePath);
    }

    /**
     * Get description for all entry types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getEntryDescriptions(options?: any) {
        return DefaultApiFp(this.configuration).getEntryDescriptions(options)(this.axios, this.basePath);
    }

    /**
     * Returns a new user session
     * @param {Credentials} credentials User Credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public loginUser(credentials: Credentials, options?: any) {
        return DefaultApiFp(this.configuration).loginUser(credentials, options)(this.axios, this.basePath);
    }

}


